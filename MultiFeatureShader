Shader "Unlit/MultFeatureShader"
{
    Properties
    {
        [HideInInspector]
        _MainTex("Texture", 2D) = "white" {}

        [Space(25)]
        [Header(RGB Mask)]
        _Mask   ("Mask", 2D) = "white" {}
        _RChannel("RChannel", Color) = (1, 0, 0, 1)
        _GChannel("GChannel", Color) = (0, 1, 0, 1)
        _BChannel("BChannel", Color) = (0, 0, 1, 1)

        [Space(25)]
        [Header(Outline)]
        _OutlineSize("Outline Size", Range(0, 0.1)) = 1
        _OutlineColor("Outline Color", Color) = (1, 0, 0, 1)

        [Space(25)]
        [Header(Displacement UV)]
        _DisplacementMap("Displacement Map", 2D) = "white" {}
        _DisplacementNoise("Displacement Noise", 2D) = "white" {}
        _DisplacementIntensity("DisplacementIntensity", Range(0, 0.01)) = 1
        _DisplacementSpeed("DisplacementSpeed", Range(0, 1)) = 1

        [Space(25)]
        [Header(Dissolve)]
        _DissolveNoise("Dissolve Noise", 2D) = "white" {}
        _DissolveAmount("Dissolve Amount", Range(0, 1)) = 1
        _DissolveBorder("Dissolve Border", Range(0, 0.1)) = 1
        _DissolveStep("Dissolve Step", Range(0, 0.1)) = 0
    }
    SubShader
    {
        Tags { "Queue"="Transparent" }

        Blend SrcAlpha OneMinusSrcAlpha

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            sampler2D _Mask;
            float4 _Mask_ST;

            float4 _RChannel;
            float4 _GChannel;
            float4 _BChannel;

            float _OutlineSize;
            float4 _OutlineColor;

            sampler2D _DisplacementMap;
            float _DisplacementIntensity;
            sampler2D _DisplacementNoise;
            float _DisplacementSpeed;

            sampler2D _DissolveNoise;
            float4 _DissolveNoise_ST;
            float _DissolveAmount;
            float _DissolveBorder;
            float _DissolveStep;

            fixed4 rbgMask(fixed4 base, fixed4 mask)
            {
                fixed4 masked = base;

                float isMaskedPixel = min(mask.r + mask.g + mask.b, 1);

                float4 rColor = mask.r * _RChannel;
                float4 gColor = mask.g * _GChannel;
                float4 bColor = mask.b * _BChannel;

                masked = lerp(base, rColor, mask.r);
                masked = lerp(masked, gColor, mask.g);
                masked = lerp(masked, bColor, mask.b);

                return masked;
            }

            fixed4 outline(fixed2 uv, fixed4 base)
            {
                fixed4 col1 = tex2D(_MainTex, uv + float2(_OutlineSize, 0));
                fixed4 col2 = tex2D(_MainTex, uv + float2(-_OutlineSize, 0));
                fixed4 col3 = tex2D(_MainTex, uv + float2(0, _OutlineSize));
                fixed4 col4 = tex2D(_MainTex, uv + float2(0, -_OutlineSize));

                fixed4 col = saturate(col1 + col2 + col3 + col4);

                col.a -= base.a;

                fixed4 outlined = lerp(float4(0, 0, 0, 0), _OutlineColor, col.a);

                return outlined;
            }

            fixed2 displacement(fixed2 uv)
            {
                fixed4 dispNoise = tex2D(_DisplacementNoise, uv + float2(-_Time.y * _DisplacementSpeed, 0));

                fixed4 dispMap = tex2D(_DisplacementMap, uv);

                uv += float2(dispNoise.r, dispNoise.r) * _DisplacementIntensity * dispMap.r;

                return uv;
            }

            fixed4 dissolve(fixed4 base, fixed2 uv)
            {
                fixed2 noiseUV = TRANSFORM_TEX(uv, _DissolveNoise);

                fixed4 outsideDissolve = lerp(float4(1, 1, 1, 0), float4(1, 1, 1, 1), base.a);
                fixed4 insideDissolve = base;

                fixed4 dissolveMask = tex2D(_DissolveNoise, noiseUV);

                insideDissolve *= smoothstep(saturate(dissolveMask.r - _DissolveStep),
                    saturate(dissolveMask.r + _DissolveStep),
                    _DissolveAmount);

                outsideDissolve *= smoothstep(saturate(dissolveMask.r - _DissolveStep),
                    saturate(dissolveMask.r + _DissolveStep),
                    _DissolveAmount + _DissolveBorder)
                    * _OutlineColor;
                
                fixed threshold = _DissolveAmount > 0 ? 1 : 0;

                fixed4 finalDissolved = lerp(insideDissolve, outsideDissolve, (outsideDissolve.a - insideDissolve.a) * threshold);

                return finalDissolved;
            }

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);

                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {
                fixed2 uv = displacement(i.uv);

                fixed4 col = tex2D(_MainTex, uv);
                fixed4 mask = tex2D(_Mask, uv);

                fixed4 maskedCol = rbgMask(col, mask);
                fixed4 outlinedCol = outline(uv, col);

                fixed4 finalCol = lerp(maskedCol, outlinedCol, outlinedCol.a);

                finalCol = dissolve(finalCol, uv);

                return finalCol;
            }
            ENDCG
        }
    }
}
